// <auto-generated />
using System;
using DocumentNotificationService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentNotificationService.Migrations
{
    [DbContext(typeof(DocumentNotificationContext))]
    [Migration("20250926155732_UpdateToSnakeCase")]
    partial class UpdateToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DocumentNotificationService.Models.LastQueryTimestamp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastSuccessfulQuery")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_successful_query");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_last_query_timestamps");

                    b.ToTable("last_query_timestamps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastSuccessfulQuery = new DateTime(2025, 9, 25, 15, 57, 31, 825, DateTimeKind.Utc).AddTicks(7230),
                            UpdatedAt = new DateTime(2025, 9, 26, 15, 57, 31, 825, DateTimeKind.Utc).AddTicks(7472)
                        });
                });

            modelBuilder.Entity("DocumentNotificationService.Models.ProcessedDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("document_date");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("document_id");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error_message");

                    b.Property<bool>("MessageSent")
                        .HasColumnType("bit")
                        .HasColumnName("message_sent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<string>("PortfolioId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("portfolio_id");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("processed_at");

                    b.HasKey("Id")
                        .HasName("pk_processed_documents");

                    b.HasIndex("DocumentDate");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("PortfolioId");

                    b.ToTable("processed_documents");
                });
#pragma warning restore 612, 618
        }
    }
}
